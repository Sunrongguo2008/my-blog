
[{"content":"这是一个展示所有 Markdown 语法的综合文档。\n标题语法 # 三级标题 # 四级标题 # 五级标题 # 六级标题 # 文本格式 # 这是粗体文本，这是_斜体文本_，这是_粗斜体文本_。\n这是删除线文本。\n这是行内代码示例。\n这是一个引用块\n可以包含多行内容\n也可以嵌套引用\n列表 # 无序列表 # 第一项 第二项 嵌套项 2.1 嵌套项 2.2 更深层嵌套 2.2.1 第三项 有序列表 # 第一步 第二步 子步骤 2.1 子步骤 2.2 第三步 任务列表 # 已完成任务 未完成任务 另一个待办事项 链接和图片 # 这是一个链接\n带标题的链接\nhttps://example.com\n图片标题 代码块 # Python 代码 # def hello_world(): \u0026#34;\u0026#34;\u0026#34;示例函数\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Hello, World!\u0026#34;) return True if __name__ == \u0026#34;__main__\u0026#34;: hello_world() Bash 代码 # #!/bin/bash echo \u0026#34;Hello from Bash\u0026#34; ls -la | grep \u0026#34;.md\u0026#34; 无语法高亮 # 纯文本代码块 没有语法高亮 表格 # 左对齐 居中对齐 右对齐 单元格1 单元格2 单元格3 数据A 数据B 数据C 粗体 斜体 代码 分隔线 # 使用三个或更多的星号、减号或下划线：\nHTML 元素 # Markdown 支持内联 HTML：\n点击展开详情 这是折叠的内容。\n可以包含Markdown格式。\nCtrl + C\n高亮文本（部分渲染器支持）\n脚注 # 这是一个带脚注的句子^1。\n这是另一个脚注^note。\n转义字符 # 使用反斜杠转义特殊字符：\n这不是斜体\n这不是标题 # [这不是链接]\n特殊功能 # 数学公式（如果渲染器支持） # 行内公式：$E = mc^2$\n块级公式：\n$$ \\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2} $$ Emoji（部分渲染器支持） # \u0026#x1f604; \u0026#x2764;\u0026#xfe0f; \u0026#x1f680; \u0026#x1f4bb;\n缩写（部分渲染器支持） # HTML 是一种标记语言。\n*[HTML]: Hyper Text Markup Language\n组合示例 # 引用中的标题 # 在引用块中可以使用：\n列表 格式化文本 代码 # 甚至代码块 print(\u0026#34;在引用中\u0026#34;) 列 1 列 2 表格 也行 结语 # 这个文档展示了大多数 Markdown 语法特性。不同的 Markdown 渲染器可能支持的特性略有差异。\n文档结束 🎉\n","date":"2025-10-2","externalUrl":null,"permalink":"/posts/hello-world/","section":"Posts","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"2025-10-2","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-10-2","externalUrl":null,"permalink":"/","section":"Sunong2008's Blog","summary":"","title":"Sunong2008's Blog","type":"page"},{"content":"","date":"2025-10-2","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-10-2","externalUrl":null,"permalink":"/tags/test/","section":"Tags","summary":"","title":"Test","type":"tags"},{"content":"","date":"2025-10-2","externalUrl":null,"permalink":"/tags/%E6%B5%8B%E8%AF%95/","section":"Tags","summary":"","title":"测试","type":"tags"},{"content":"","date":"2025-8-11","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"在 Arch Linux 中文论坛询问，有人说：根据ArchWiki，需要安装 libvpl 和 vpl-gpu-rt\nsudo pacman -S libvpl sudo pacman -S vpl-gpu-rt 解决！\n","date":"2025-8-11","externalUrl":null,"permalink":"/posts/obs-%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8intel%E7%9A%84qsvarch/","section":"Posts","summary":"","title":"OBS 无法调用intel的qsv（Arch）","type":"posts"},{"content":"","date":"2025-8-9","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"最近遇到了一个的 Linux 启动问题：明明设置了开机自启动的应用程序，结果每次开机后都没运行起来。手动启动是正常的，但就是自动启动失效。\n发现问题：应用程序启动不了 # 症状 # 我开机进入桌面后发现：\nABDownloadManager 没有自动启动 Notification_monitor 脚本也没运行 这些应用都放在外接的 SSD 上（路径是 /run/media/s/SSD/...） 奇怪的是，手动双击或者命令行运行都是正常的 二、分析问题 # 查看启动日志 # journalctl -b -e 这个命令会显示本次启动的日志，-e 参数直接跳到最后面，方便查看最新的信息。\n在日志中找到了这些关键信息：\n8月 09 11:54:56 s-pc systemd-xdg-autostart-generator[893]: Exec binary \u0026#39;/run/media/s/SSD/Linux_Tools/ABDownloadManager/bin/ABDownloadManager\u0026#39; does not exist: No such file or directory 8月 09 11:54:56 s-pc systemd-xdg-autostart-generator[893]: /home/s/.config/autostart/com.abdownloadmanager.desktop: not generating unit, executable specified in Exec= does not exist. 8月 09 11:54:58 s-pc udisksd[951]: **Mounted /dev/nvme0n1p4 at /run/media/s/SSD on behalf of uid 1000** 11:54:56 - 系统尝试启动应用，发现路径不存在 11:54:58 - udisksd 完成 SSD 挂载，应用启动需要的路径被创建 找到原因了 # 系统想启动应用时，SSD 还没挂载好，路径不存在，启动失败。\n解决方案 # 方法一：fstab 自动挂载 # 让 SSD 开机就挂载 # 这个 SSD 每天都要用，不如让它开机就自动挂载。这样就能提前解决挂载问题，而不是等待挂载完成。\n简单配置 # 首先获取 SSD 的 UUID：\nsudo blkid /dev/nvme0n1p4 输出类似：\n/dev/nvme0n1p4: LABEL=\u0026#34;SSD\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; UUID=\u0026#34;9FAB0FC4562CB861\u0026#34; TYPE=\u0026#34;ntfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;af50b57f-7ccb-42bb-a3b5-7256ef6e3933\u0026#34; 安装 ntfs-3 g：\nsudo pacman -S ntfs-3g 然后编辑 fstab：\nsudo nano /etc/fstab 在文件末尾添加：\nUUID=9FAB0FC4562CB861 /run/media/s/SSD ntfs-3g defaults,uid=1000,gid=1000,windows_names,nofail 0 0 systemctl daemon-reload 配置完成后，重启系统，SSD 就会在开机时自动挂载，autostart 也能正常工作了。\n方法二：创建 systemd 用户服务 # 这个方法有个缺点：很多应用自带的开机自启并不是创建 systemd 用户服务的方案，需要对每个应用进行修改\n而且以下内容由 AI（Claude）撰写，我也没试过，不知道是否可行\nSystemd 特点 # 传统的 autostart 机制比较\u0026quot;死板\u0026quot;：到时间就启动，不管条件是否满足。而 systemd 服务更智能，可以\u0026quot;等条件满足再启动\u0026quot;。\n关键是 ExecStartPre 指令，它让程序在启动前先执行一个预检查脚本。我们可以用它来主动等待挂载完成：\nExecStartPre=/bin/bash -c \u0026#39;while [ ! -d \u0026#34;/run/media/s/SSD\u0026#34; ]; do sleep 1; done\u0026#39; 这行代码的意思是：不断检查 SSD 挂载目录是否存在，不存在就等 1 秒再检查，直到目录存在才继续执行主程序。\n创建服务配置 # 以 ABDownloadManager 为例，创建 systemd 用户服务：\n# 创建服务目录 mkdir -p ~/.config/systemd/user # 创建服务配置文件 cat \u0026gt; ~/.config/systemd/user/abdownloadmanager.service \u0026lt;\u0026lt; EOF [Unit] Description=AB Download Manager After=graphical-session.target Wants=graphical-session.target [Service] Type=simple ExecStartPre=/bin/bash -c \u0026#39;while [ ! -d \u0026#34;/run/media/s/SSD\u0026#34; ]; do sleep 1; done\u0026#39; ExecStart=/run/media/s/SSD/Linux_Tools/ABDownloadManager/bin/ABDownloadManager Restart=on-failure RestartSec=5 [Install] WantedBy=default.target EOF 配置说明：\n​ After=graphical-session.target：确保在图形界面准备好后再启动 ​ ExecStartPre：启动前等待挂载完成 ​ Restart=on-failure：如果程序崩溃会自动重启 ​ RestartSec=5：重启前等待 5秒 同样为 notification_monitor 创建服务：\ncat \u0026gt; ~/.config/systemd/user/notification_monitor.service \u0026lt;\u0026lt; EOF [Unit] Description=Notification Monitor After=graphical-session.target Wants=graphical-session.target [Service] Type=simple ExecStartPre=/bin/bash -c \u0026#39;while [ ! -d \u0026#34;/run/media/s/SSD\u0026#34; ]; do sleep 1; done\u0026#39; ExecStart=/run/media/s/SSD/Linux_Tools/notification_monitor/notification_monitor.sh Restart=on-failure RestartSec=5 [Install] WantedBy=default.target EOF 部署步骤 # 重载 systemd 配置：\nsystemctl --user daemon-reload 启用服务：\nsystemctl --user enable abdownloadmanager.service systemctl --user enable notification_monitor.service 清理旧的 autostart 配置：\nrm ~/.config/autostart/com.abdownloadmanager.desktop rm ~/.config/autostart/notification_monitor.sh.desktop 测试效果（可选）：\n# 立即启动测试 systemctl --user start abdownloadmanager.service # 查看服务状态 systemctl --user status abdownloadmanager.service # 查看服务日志 journalctl --user -u abdownloadmanager.service -f 重启系统后，应用程序就能正常自启动了。\n","date":"2025-8-9","externalUrl":null,"permalink":"/posts/linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"Posts","summary":"","title":"linux应用程序无法开机自启可能的解决方案","type":"posts"},{"content":"在 btrfs 下，创建 swap 文件而不是 swap 分区时：\n把 swap 文件放到​ ​ /swap ​​子卷中： 因为 timeshift 不会备份 /swap 子卷，导致恢复快照时，swap 文件 /swap/swapfile 会消失\n不把 swap 文件放到子卷中： timeshift 备份时，swapfile 被内核使用，会导致 E: ERROR: Could not create subvolume: Text file busy，导致无法创建快照，出现这个情况\n所以，最佳实践可能是创建 swap 分区而不是swap 文件 (参考来源)\n或者仍然把 swap 文件放到​ ​ /swap ​​子卷中，timeshift 恢复快照后，手动把 /swap 目录删掉、把原来的 /swap 子卷移动过来\n‍\n","date":"2025-8-9","externalUrl":null,"permalink":"/posts/%E5%85%B3%E4%BA%8Etimeshift%E5%92%8Cswap%E7%9A%84%E6%81%A9%E6%80%A8%E9%97%AE%E9%A2%98/","section":"Posts","summary":"","title":"关于timeshift和swap的恩怨问题","type":"posts"},{"content":" 1. 原因 # 英雄在这里\nbtrfs 文件系统玩 swapfile，如果还想用 timeshift 或者 snapper 备份快照，就必须把 swap 文件放到不需要备份的子卷里面（比如创建 @swap 子卷）。 不然的话，如果直接放在需要快照的子卷，会在创建快照的时候会失败（提示设备正在被写入啥的/ 在 timeshift GUI 上不显示创建的快照） 要是像我一样，哪天需要恢复快照了，突然发现一个快照都没建出来就搞笑了\u0026hellip;\u0026hellip;\n所以需要把 swapfile 放到@swap 子卷里面\n2. 解决方案 # ⚠️注意：\n在 btrfs 下，创建swap 文件而不是 swap 分区时：\n把 swap 文件放到​ ​ /swap ​​子卷中： 因为 timeshift 不会备份 /swap 子卷，导致恢复快照时，swap 文件 /swap/swapfile 会消失\n不把 swap 文件放到子卷中： timeshift 备份时，swapfile 被内核使用，会导致 E: ERROR: Could not create subvolume: Text file busy，导致无法创建快照 (参考来源)\n最佳实践可能是创建 swap 分区而不是swap 文件\n或者仍然把 swap 文件放到​ ​ /swap ​​子卷中，timeshift 恢复快照后，手动把 /swap 目录删掉、把原来的 /swap 子卷移动过来\n以下是创建 swap 文件+把 swap 文件放到​ ​ /swap ​​子卷中的方案（创建 swap 分区的方法网上一搜一大把，就不写了）：\n2.1 创建交换空间（设置子卷） # # 创建交换子卷，位置是/swap（其他位置也可以，但是下面的都得换掉） sudo btrfs subvolume create /swap # 进入交换子卷目录 cd /swap # 创建一个0大小的文件 sudo truncate -s 0 /swap/swapfile # 设置No_COW属性 sudo chattr +C swapfile # 禁用压缩 sudo btrfs property set swapfile compression none ERROR: failed to set compression for swapfile: Invalid argument #不知道为什么，不过不影响 # 将文件填充、扩容 sudo dd if=/dev/zero of=/swap/swapfile bs=1G count=6 # 设置swapfile权限 sudo chmod 600 swapfile # 格式化swapfile sudo mkswap swapfile # 启用swapfile sudo swapon swapfile 2.2 验证交换空间是否启用 # # 查看交换文件是否已激活 sudo swapon --show # 查看系统内存和交换使用情况 free -h 你应该能看到类似这样的输出：\n$ sudo swapon --show NAME TYPE SIZE USED PRIO /swap/swapfile file 6G 0B -2 $ free -h 总计 已用 空闲 共享 缓冲/缓存 可用 内存： 15Gi 6.3Gi 621Mi 1.3Gi 9.5Gi 9.0Gi 交换： 6.0Gi 0B 6.0Gi 2.3 设置开机自动挂载 swapfile # # 编辑 fstab 文件 sudo nano /etc/fstab # 在文件末尾添加这一行： /swap/swapfile none swap sw 0 0 重启后验证交换文件是否自动启用：\n# 查看交换文件是否已激活 sudo swapon --show # 查看系统内存和交换使用情况 free -h 你应该能看到类似这样的输出：\n$ sudo swapon --show NAME TYPE SIZE USED PRIO /swap/swapfile file 6G 0B -2 $ free -h 总计 已用 空闲 共享 缓冲/缓存 可用 内存： 15Gi 6.3Gi 621Mi 1.3Gi 9.5Gi 9.0Gi 交换： 6.0Gi 0B 6.0Gi ‍\n","date":"2025-8-7","externalUrl":null,"permalink":"/posts/btrfs%E4%B8%8B%E4%B8%8D%E6%98%BE%E7%A4%BAtimeshift%E5%88%9B%E5%BB%BA%E7%9A%84%E5%BF%AB%E7%85%A7%E5%88%9B%E5%BB%BA%E5%BF%AB%E7%85%A7%E5%A4%B1%E8%B4%A5/","section":"Posts","summary":"","title":"btrfs下不显示timeshift创建的快照／创建快照失败","type":"posts"},{"content":" 发现问题 # $ sudo timeshift --list #列出快照 [Warning] Deleted invalid lock Mounted \u0026#39;/dev/nvme0n1p6\u0026#39; at \u0026#39;/run/timeshift/47565/backup\u0026#39; btrfs: Quotas are not enabled Device : /dev/nvme0n1p6 UUID : da4fd0a6-78d7-464c-8e24-b38ee2d483b7 Path : /run/timeshift/47565/backup Mode : BTRFS Status : OK 3 snapshots, 9.9 GB free Num Name Tags Description ------------------------------------------------------------------------------ 0 \u0026gt; 2025-08-05_22-44-05 O Before restoring \u0026#39;2025-08-05 10:18 下午\u0026#39; 1 \u0026gt; 2025-08-07_14-31-24 B H D W M 2 \u0026gt; 2025-08-07_15-08-42 O H 我无法删除的快照是 2025-08-05_22-44-05，尝试用命令行删一下\n$ sudo timeshift --delete --snapshot 2025-08-05_22-44-05  ✔ Mounted \u0026#39;/dev/nvme0n1p6\u0026#39; at \u0026#39;/run/timeshift/46581/backup\u0026#39; btrfs: Quotas are not enabled ------------------------------------------------------------------------------ Removing snapshot: 2025-08-05_22-44-05 Deleting subvolume: @ (Id:309) E: ERROR: Could not destroy subvolume/snapshot: Directory not empty E: Failed to delete snapshot subvolume: \u0026#39;/run/timeshift/46581/backup/timeshift-btrfs/snapshots/2025-08-05_22-44-05/@\u0026#39; E: Failed to remove snapshot: 2025-08-05_22-44-05 删除失败了。观察到快照文件在 /run/timeshift/47326/backup/timeshift-btrfs/snapshots/2025-08-05_22-44-05/，咱看一下这个目录\n$ ls -la \u0026#34;/run/timeshift/47326/backup/timeshift-btrfs/snapshots/2025-08-05_22-44-05/\u0026#34; ls: 无法访问 \u0026#39;/run/timeshift/47326/backup/timeshift-btrfs/snapshots/2025-08-05_22-44-05/\u0026#39;: 没有那个文件或目录 好家伙，目录不存在\n问题发现了：快照目录在文件系统中已经不存在了，但是 Timeshift 仍然认为它存在。这是一个典型的 Timeshift 状态与实际文件系统不一致的问题。这说明 Timeshift 的内部数据库与实际文件系统状态不同步。\n解决问题 # 使用 sudo timeshift --list：\n查看 Device 字段（每个人的都不一样）：Device : /dev/nvme0n1p6 ​\n查看想要删除的快照的 NAME 字段（每个人的都不一样）：2025-08-05_22-44-05 ​\n# 手动挂载到 /mnt $ sudo mount /dev/nvme0n1p6 /mnt # 检查实际存在的快照 $ ls -la /mnt/timeshift-btrfs/snapshots/ 总计 0 drwxr-xr-x 1 root root 114 8月 7日 16:00 . drwxr-xr-x 1 root root 210 8月 7日 16:00 .. drwxr-xr-x 1 root root 32 8月 7日 16:39 2025-08-05_22-44-05 drwxr-xr-x 1 root root 20 8月 7日 15:00 2025-08-07_14-31-24 drwxr-xr-x 1 root root 20 8月 7日 16:00 2025-08-07_15-08-42 # 删除不存在的快照条目 sudo rm -rf /mnt/timeshift-btrfs/snapshots/2025-08-05_22-44-05 2\u0026gt;/dev/null # 检查是否删除 $ ls -la /mnt/timeshift-btrfs/snapshots/ 总计 0 drwxr-xr-x 1 root root 76 8月 7日 16:45 . drwxr-xr-x 1 root root 210 8月 7日 16:00 .. drwxr-xr-x 1 root root 20 8月 7日 15:00 2025-08-07_14-31-24 drwxr-xr-x 1 root root 20 8月 7日 16:00 2025-08-07_15-08-42 # `2025-08-05_22-44-05`没有了！删了！ # 卸载 sudo umount /mnt ‍\n","date":"2025-8-7","externalUrl":null,"permalink":"/posts/timeshift%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E5%BF%AB%E7%85%A7/","section":"Posts","summary":"","title":"timeshift无法删除快照","type":"posts"},{"content":"都是我折腾 winapps 时遇到的问题，费了三整天才慢慢解决，故分享出来让大家少踩坑。\n1. 1. RDP 花费的连接时间太长，导致脚本超时 # 1.1 特点 # 运行 50 秒才启动\n$ xfreerdp3 /u:\u0026#34;Administrator\u0026#34; /p:\u0026#34;1\u0026#34; /v:192.168.122.122 /cert:tofu [08:48:09:871] [26120:0000660b] [WARN][com.freerdp.client.x11] - [load_map_from_xkbfile]: : keycode: 0x08 -\u0026gt; no RDP scancode found [08:48:09:871] [26120:0000660b] [WARN][com.freerdp.client.x11] - [load_map_from_xkbfile]: ZEHA: keycode: 0x5D -\u0026gt; no RDP scancode found [08:48:09:893] [26120:0000660b] [WARN][com.freerdp.crypto] - [verify_cb]: Certificate verification failure \u0026#39;self-signed certificate (18)\u0026#39; at stack position 0 [08:48:09:893] [26120:0000660b] [WARN][com.freerdp.crypto] - [verify_cb]: CN = DESKTOP-G8N9MT9 [08:48:32:930] [26120:0000660b] [ERROR][com.winpr.sspi.Kerberos] - [kerberos_AcquireCredentialsHandleA]: krb5glue_get_init_creds (Cannot contact any KDC for realm \u0026#39;ATHENA.MIT.EDU\u0026#39; [-1765328228]) [08:48:55:956] [26120:0000660b] [ERROR][com.winpr.sspi.Kerberos] - [kerberos_AcquireCredentialsHandleA]: krb5glue_get_init_creds (Cannot contact any KDC for realm \u0026#39;ATHENA.MIT.EDU\u0026#39; [-1765328228]) [08:48:55:967] [26120:0000660b] [WARN][com.freerdp.core.connection] - [rdp_client_connect_auto_detect]: expected messageChannelId=1008, got 1003 [08:48:55:967] [26120:0000660b] [WARN][com.freerdp.core.license] - [license_read_binary_blob_data]: license binary blob::type BB_ERROR_BLOB, length=0, skipping. [08:48:55:992] [26120:0000660b] [WARN][com.freerdp.core.connection] - [rdp_client_connect_auto_detect]: expected messageChannelId=1008, got 1003 [08:48:55:999] [26120:0000660b] [INFO][com.freerdp.gdi] - [gdi_init_ex]: Local framebuffer format PIXEL_FORMAT_BGRX32 [08:48:55:999] [26120:0000660b] [INFO][com.freerdp.gdi] - [gdi_init_ex]: Remote framebuffer format PIXEL_FORMAT_BGRA32 [08:48:55:000] [26120:0000660b] [INFO][com.freerdp.channels.rdpsnd.client] - [rdpsnd_load_device_plugin]: [static] Loaded fake backend for rdpsnd [08:48:55:000] [26120:0000660b] [INFO][com.freerdp.channels.drdynvc.client] - [dvcman_load_addin]: Loading Dynamic Virtual Channel ainput [08:48:55:000] [26120:0000660b] [INFO][com.freerdp.channels.drdynvc.client] - [dvcman_load_addin]: Loading Dynamic Virtual Channel rdpgfx [08:48:55:001] [26120:0000660b] [INFO][com.freerdp.channels.drdynvc.client] - [dvcman_load_addin]: Loading Dynamic Virtual Channel disp [08:48:55:001] [26120:0000660b] [INFO][com.freerdp.channels.drdynvc.client] - [dvcman_load_addin]: Loading Dynamic Virtual Channel rdpsnd [08:48:55:123] [26120:000066fe] [INFO][com.freerdp.channels.rdpsnd.client] - [rdpsnd_load_device_plugin]: [dynamic] Loaded fake backend for rdpsnd [08:48:56:947] [26120:000066fe] [WARN][com.freerdp.channels.drdynvc.client] - [check_open_close_receive]: {Microsoft::Windows::RDS::DisplayControl:9} OnOpen=(nil), OnClose=0x7f02c8b5ecc0 [08:48:56:965] [26120:000066fe] [INFO][com.freerdp.channels.rdpsnd.client] - [rdpsnd_load_device_plugin]: [dynamic] Loaded fake backend for rdpsnd [08:48:58:969] [26120:000066fe] [WARN][com.freerdp.channels.drdynvc.client] - [check_open_close_receive]: {Microsoft::Windows::RDS::DisplayControl:9} OnOpen=(nil), OnClose=0x7f02c8b5ecc0 [08:48:58:979] [26120:00006608] [ERROR][com.freerdp.core] - [freerdp_abort_connect_context]: ERRCONNECT_CONNECT_CANCELLED [0x0002000B] 1.2 问题分析 # 日志中的关键错误：\n[ERROR][com.winpr.sspi.Kerberos] - [kerberos_AcquireCredentialsHandleA]: krb5glue_get_init_creds (Cannot contact any KDC for realm \u0026#39;ATHENA.MIT.EDU\u0026#39; [-1765328228]) FreeRDP 试图使用 Kerberos 认证，但无法联系到域控制器，导致多次超时重试。\n1.3 解决方案 # 明确指定本地认证\n1.3.1 对于测试RDP 的命令 # 修改成：\nxfreerdp3 /u:\u0026#34;Administrator\u0026#34; /p:\u0026#34;1\u0026#34; /v:192.168.122.122 /cert:tofu /d:WORKGROUP 1.3.2 对于安装脚本的超时失败 # 通过阅读安装脚本，发现 /d: 参数由 RDP_DOMAIN 决定\n对应到 ~/.config/winapps/winapps.conf 上，也就是修改成：\n# [WINDOWS DOMAIN] # DEFAULT VALUE: \u0026#39;\u0026#39; (BLANK) RDP_DOMAIN=\u0026#34;WORKGROUP\u0026#34; 1.4 备注 # 1.4.1 关于 AI # 大部分 AI（DeepSeek Qwen）会给出 xfreerdp3 /u:\u0026quot;Administrator\u0026quot; /p:\u0026quot;1\u0026quot; /v:192.168.122.122 /cert:tofu /sec:rdp 或者 xfreerdp3 /u:\u0026quot;Administrator\u0026quot; /p:\u0026quot;1\u0026quot; /v:192.168.122.122 /cert:tofu /auth-only:ntlm 一个命令会报错，一个仍然需要等待大量时间\n还是 Claude 牛逼，虽然仍然给出上面的错误指令，但是也给出了正确方案 xfreerdp3 /u:\u0026quot;Administrator\u0026quot; /p:\u0026quot;1\u0026quot; /v:192.168.122.122 /cert:tofu /d:WORKGROUP ​\n1.4.2 Claude 给出的其他方案（不知道是否可行） # 在 Windows 虚拟机中：\n打开\u0026quot;组策略编辑器\u0026quot; (gpedit. Msc) 导航到：计算机配置 → 管理模板 → Windows 组件 → 远程桌面服务 → 远程桌面会话主机 → 安全 禁用\u0026quot;要求使用网络级别身份验证对远程连接的用户进行身份验证\u0026quot; 或者直接 cmd 命令：\nreg add \u0026#34;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026#34; /v UserAuthentication /t REG_DWORD /d 0 2. 中文无法输入 # 2.1 特点 # 无法显示输入法候选词窗口\n2.2 原因\u0026amp;解决方案 # Windows原生输入法兼容性不好。建议换为微信输入法，百度输入法等\nWindows 开机后在 winapps 连接前使用了其他连接（KVM 的、测试RDP 时的），导致输入法候选词窗口跑到其他连接上没回来（我是这样理解的）。一般重启可解决\n3. 中文输入乱码 # 3.1 特点 # 按键映射错误：\n类似这样\n打开记事本，输入 qw，结果记事本上的内容为​s'd​，候选词为“上的” 同理，Backspace, Delete 等按键也映射异常，导致无法退格删除等 英文就能正常输入 3.2 原因\u0026amp;解决方案 # 你被 README 的一句话骗了：\n3.2.1 Step 3: Create a WinApps Configuration File 第 3 步：创建 WinApps 配置文件 # \u0026hellip;\u0026hellip;\n3.2.1.1 Configuration Options Explained # \u0026hellip;\u0026hellip;\u0026hellip; To enable non-English input and seamless language switching, you can try adding **​/kbd:unicode​**​ to **​RDP_FLAGS​**​ . This ensures client inputs are sent as Unicode sequences. \u0026hellip;\u0026hellip; 里面的\nTo enable non-English input and seamless language switching, you can try adding ​ /kbd:unicode ​​ to ​ RDP_FLAGS ​​ . This ensures client inputs are sent as Unicode sequences.\n为了启用非英语输入并实现无缝的语言切换，您可以尝试在 /kbd:unicode 添加到 RDP_FLAGS 中。这确保客户端输入以 Unicode 序列发送。\n就是它干的！不要加 /kbd:unicode！血的教训！\n明明是\nTo enable prevent non-English input and seamless difficult language switching, you can try adding /kbd:unicode to RDP_FLAGS. This ensures client inputs are sent as Unicode sequences garbled.\n为了启用​阻止非英语输入并实现无缝​困难的语言切换，您可以尝试在 /kbd:unicode 添加到 RDP_FLAGS 中。这确保客户端输入以 Unicode 序列​乱码发送。\n可能对其他语言有用，对中文还是算了吧\n4. 已经被我修复 待官方修复 没解决 的问题 # 注：已经​**提交了PR**​ **，**​~~等待官方修复 ing\u0026hellip;~~ 已合并，BUG已修复\n4.1 发现问题 # 直接双击打开文件（文件挂载在 /run/media/s/松果U盘/DeepSeek.pptx）\n图 1 但是用①选择文件打开，正常。之后直接点②也能直接打开。\n奇了怪了\n图 2 4.2 分析问题 # 仔细观察发现：\n图一的路径是 \\\\tsclient\\media\\松果U盘\\DeepSeek.pptx ​\n图二的路径是 \\\\tsclient\\media\\s\\松果U盘\\DeepSeek.pptx ​\n也就是说，winapps 启动的时候挂载的是 \\\\tsclient\\media\\s\\松果U盘\\, 但是启动 PowerPoint 的命令行却指向了 \\\\tsclient\\media\\松果U盘\\，导致 PowerPoint 找不到文件\n花了一晚上时间，发现是 ~/.local/bin/winapps 的正则匹配有问题\n第 668 行的 -e 's|\u0026lt;sup\u0026gt;('\u0026quot;${REMOVABLE_MEDIA//|/\\|}\u0026quot;')/[\u0026lt;/sup\u0026gt;/]*|\\\\\\\\tsclient\\\\media|' \\ ​\n应该改成 -e 's|^'\u0026quot;${REMOVABLE_MEDIA}\u0026quot;'|\\\\\\\\tsclient\\\\media|' \\ ​\n已经​**提交了PR**​ **，**​~~等待官方修复 ing\u0026hellip;~~ 已合并\n4.3 解决问题 # 编辑 ~/.local/bin/winapps，把第 668 行改成：\n-e \u0026#39;s|^\u0026#39;\u0026#34;${REMOVABLE_MEDIA}\u0026#34;\u0026#39;|\\\\\\\\tsclient\\\\media|\u0026#39; \\ 大功告成！\n","date":"2025-8-6","externalUrl":null,"permalink":"/posts/%E6%88%91%E9%81%87%E5%88%B0%E7%9A%84winapps%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"Posts","summary":"","title":"我遇到的winapps问题\u0026解决方案","type":"posts"},{"content":" 1. Btrfs 压缩 # 1.1 实施步骤： # 修改 ​ /etc/fstab ​：\nUUID=da4fd0a6-78d7-464c-8e24-b38ee2d483b7 / btrfs subvol=/@,defaults,compress=zstd:3 0 0 UUID=da4fd0a6-78d7-464c-8e24-b38ee2d483b7 /home btrfs subvol=/@home,defaults,compress=zstd:3 0 0 UUID=da4fd0a6-78d7-464c-8e24-b38ee2d483b7 /var/cache btrfs subvol=/@cache,defaults,compress=zstd:1 0 0 UUID=da4fd0a6-78d7-464c-8e24-b38ee2d483b7 /var/log btrfs subvol=/@log,defaults,compress=zstd:2 0 0 重新挂载所有分区：\n# 重新加载 systemd 配置 sudo systemctl daemon-reload # 然后再重新挂载 sudo mount -o remount,compress=zstd:3 / sudo mount -o remount,compress=zstd:3 /home sudo mount -o remount,compress=zstd:1 /var/cache sudo mount -o remount,compress=zstd:2 /var/log 重新压缩现有数据（可选，需要一些时间）：\n#在 defragment 命令中，压缩参数的语法不同。 sudo btrfs filesystem defragment -r -v -czstd / # 注意这里只需要指定算法，不需要级别 sudo btrfs filesystem defragment -r -v -czstd /home sudo btrfs filesystem defragment -r -v -czstd /var/cache sudo btrfs filesystem defragment -r -v -czstd /var/log 2. 空间占用变大： # 2.1 问题分析： # sudo btrfs filesystem usage / Data 部分 Data,single 变大\n2.2 解决方案： # 这种情况通常是由于重新压缩过程中产生的碎片或者空间分配不均造成的。需要执行平衡操作来重新整理数据：\n# 执行平衡来优化空间使用 sudo btrfs balance start -dusage=50 / # 如果上面的完成，可以再执行更彻底的平衡(更有效) sudo btrfs balance start / # 监控平衡进度 sudo btrfs balance status / # 五秒一查 watch -n 5 \u0026#39;sudo btrfs balance status /\u0026#39; 重启就好了\n或者试试删除快照\n","date":"2025-8-5","externalUrl":null,"permalink":"/posts/btrfs%E5%8E%8B%E7%BC%A9%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E5%8F%98%E5%A4%A7/","section":"Posts","summary":"","title":"btrfs压缩、空间占用变大","type":"posts"},{"content":" 1. 特点 # $ sudo swapon /swapfile swapon: /swapfile：swapon 失败: 无效的参数 或者 swapon: swapfile: swapon failed: Invalid argument 2. 原因 # 在Btrfs上建立交换文件需要设置 No_COW 属性 + 禁用压缩\n3. 解决方案 # ⚠️注意：\n在 btrfs 下，创建swap 文件而不是 swap 分区时：\n把 swap 文件放到​ ​ /swap ​​子卷中： 因为 timeshift 不会备份 /swap 子卷，导致恢复快照时，swap 文件 /swap/swapfile 会消失\n不把 swap 文件放到子卷中： timeshift 备份时，swapfile 被内核使用，会导致 E: ERROR: Could not create subvolume: Text file busy，导致无法创建快照 (参考来源)\n最佳实践可能是创建 swap 分区而不是swap 文件\n或者仍然把 swap 文件放到​ ​ /swap ​​子卷中，timeshift 恢复快照后，手动把 /swap 目录删掉、把原来的 /swap 子卷移动过来\n以下是创建 swap 文件+不把 swap 文件放到子卷中的方案（创建 swap 分区的方法网上一搜一大把，就不写了）：\n3.1 错误示范： # $ sudo truncate -s 6G /swapfile # 创建一个6G大小的文件 $ sudo chattr +C /swapfile # 设置No_COW属性 $ sudo btrfs property set /swapfile compression none # 禁用压缩 $ sudo chmod 600 /swapfile # 设置swapfile权限 $ sudo mkswap /swapfile # 格式化swapfile mkswap: /swapfile 包含空洞或者其它不支持的扩展。 此交换文件可能会在启用时被内核拒绝！ 使用 --verbose 显示更多细节。 正在设置交换空间版本 1，大小 = 6 GiB (6442446848 个字节) 无标签，UUID=0c11bd0e-061e-419f-88b9-b13504f612c4 $ sudo swapon /swapfile # 启用swapfile swapon: /swapfile：将跳过 - 它似乎有空洞。 $ 错误行为：先写入 6 G，再设置 No_COW 属性 + 禁用压缩\n❌这样不行，6 G 内容被压缩了\n热心网友的提醒（在评论区）：\n⚠️注意\nbtrfs 文件系统玩 swapfile，如果还想用 timeshift 或者 snapper 备份快照，就必须把 swap 文件放到不需要备份的子卷里面（比如创建 @swap 子卷）。 不然的话，如果直接放在需要快照的子卷，会在创建快照的时候会失败（提示设备正在被写入啥的/ 在 timeshift GUI 上不显示创建的快照） 要是像我一样，哪天需要恢复快照了，突然发现一个快照都没建出来就搞笑了\u0026hellip;\u0026hellip;\n设置子卷的 swap 创建我会放在另一个博客里面\n如果你要用到 timeshift 等 btrfs 快照（大概率你会用到），就去那个博客里面看！\n博客地址：https://www.cnblogs.com/sunong/p/19026935.html\n3.2 正确示范（不设置子卷） # ⚠️再次提醒：如果你要用到 timeshift 等 btrfs 快照（大概率你会用到），就去那个博客里面看！\n# 创建一个0大小的文件 sudo truncate -s 0 /swapfile # 设置No_COW属性 sudo chattr +C /swapfile # 禁用压缩 sudo btrfs property set /swapfile compression none ERROR: failed to set compression for /swapfile: Invalid argument #不知道为什么，不过不影响 # 将文件填充、扩容 sudo dd if=/dev/zero of=/swapfile bs=1G count=6 # 设置swapfile权限 sudo chmod 600 /swapfile # 格式化swapfile sudo mkswap /swapfile # 启用swapfile sudo swapon /swapfile 3.3 验证交换空间是否启用 # # 查看交换文件是否已激活 sudo swapon --show # 查看系统内存和交换使用情况 free -h 你应该能看到类似这样的输出：\n$ sudo swapon --show NAME TYPE SIZE USED PRIO /swap/swapfile file 6G 0B -2 $ free -h 总计 已用 空闲 共享 缓冲/缓存 可用 内存： 15Gi 6.3Gi 621Mi 1.3Gi 9.5Gi 9.0Gi 交换： 6.0Gi 0B 6.0Gi 3.4 设置开机自动挂载 swapfile # # 编辑 fstab 文件 sudo nano /etc/fstab # 在文件末尾添加这一行： /swapfile none swap sw 0 0 重启后验证交换文件是否自动启用：\n# 查看交换文件是否已激活 sudo swapon --show # 查看系统内存和交换使用情况 free -h 你应该能看到类似这样的输出：\n$ sudo swapon --show NAME TYPE SIZE USED PRIO /swapfile file 6G 0B -2 $ free -h 总计 已用 空闲 共享 缓冲/缓存 可用 内存： 15Gi 6.3Gi 621Mi 1.3Gi 9.5Gi 9.0Gi 交换： 6.0Gi 0B 6.0Gi ‍\n","date":"2025-8-5","externalUrl":null,"permalink":"/posts/swapon-%E5%A4%B1%E8%B4%A5%E6%97%A0%E6%95%88%E7%9A%84%E5%8F%82%E6%95%B0-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","section":"Posts","summary":"","title":"swapon 失败：无效的参数 的解决方法","type":"posts"},{"content":" 1. 前景提要 # 首先，KDE 有这个界面\n但是用过就会知道，即使你都勾选上了，它照样不会开机自动挂载\nforum.ubuntu.com.cn/viewtopic.php?t=50539 提及了这个问题，虽然没有提到治本的解决方法，但是一个哥们提醒了我：\n调查发现是 uudisksctl mount -b xxxx 这个命令需要 root，而 KDE 似乎没有这个权限，也不会弹窗索要，导致部分分区（可能只限不可移动硬盘上的NTFS 分区）无法开机自动挂载\n2. 解决方案 # 2.1 换一种方式挂载（省心） # 常见方法有（Deepseek 给的）：\n通过 /etc/fstab 配置 使用 systemd 自动挂载 使用 pmount 工具 2.2 让 udisksctl mount -b xxxx 这类命令无需 root 权限执行 # 2.2.1 失败的方案 # 我也不知道为啥不行，网上搜的都这样干\n将用户加入 storage 用户组 sudo usermod -aG storage $(whoami) # 将当前用户加入 storage 组 验证组是否生效：运行 groups 命令，检查输出是否包含 storage。\n注销并重新登录使组权限生效\n2.2.2 可行的方案：配置 PolicyKit 规则（推荐） # 创建 PolicyKit 规则文件： sudo nano /etc/polkit-1/rules.d/50-udisks2.rules 添加以下内容： // 允许所有用户挂载/卸载块设备 polkit.addRule(function(action, subject) { if (action.id == \u0026#34;org.freedesktop.udisks2.filesystem-mount\u0026#34; || action.id == \u0026#34;org.freedesktop.udisks2.filesystem-unmount\u0026#34;) { return polkit.Result.YES; } }); 或者下面这个（没试过）：\n// 更精细的控制，只允许特定用户组 polkit.addRule(function(action, subject) { if ((action.id == \u0026#34;org.freedesktop.udisks2.filesystem-mount\u0026#34; || action.id == \u0026#34;org.freedesktop.udisks2.filesystem-unmount\u0026#34;) \u0026amp;\u0026amp; subject.isInGroup(\u0026#34;plugdev\u0026#34;)) { return polkit.Result.YES; } }); 重启以后就能发现分区被自动挂载了！\n‍\n","date":"2025-8-4","externalUrl":null,"permalink":"/posts/%E8%AE%A9kde%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E5%90%84%E4%B8%AA%E5%88%86%E5%8C%BA/","section":"Posts","summary":"","title":"让KDE自动挂载各个分区","type":"posts"},{"content":" 1. 特点 # linuxmint (ubuntu) ：\n开机黑屏。切到高级设置进入，卡在 loading initial ramdisk 界面；但是可以进入高级设置-recovery mode，在里面选择 resume 可以进入系统。\nManjaro (arch) ：\n安装完系统开机就黑屏，recovery mode 进不去\nopensuse：\n安装完系统开机就黑屏，其他未知\n临时解决方案：\n在 grub 中，对着启动项按下 e，找到以 linux /boot/vmlinuz... 开头的行，在行尾添加 dis_ucode_ldr 可以开机\n2. 原因 # Intel 微代码（Microcode）更新与内核或硬件兼容性冲突\n3. 解决方法 # 3.1 方法 1：改 grub（治标不治本，不过所有 linux 都可以用）： # 编辑 GRUB 配置文件： sudo nano /etc/default/grub 在​​ GRUB_CMDLINE_LINUX ​​中添加禁用参数：\n找到以 GRUB_CMDLINE_LINUX= 开头的行，在引号内添加 dis_ucode_ldr 参数： GRUB_CMDLINE_LINUX=\u0026#34;...原有参数... dis_ucode_ldr\u0026#34; 示例（修改后可能类似这样）：\nGRUB_CMDLINE_LINUX=\u0026#34;quiet splash dis_ucode_ldr\u0026#34; 保存并更新 GRUB：\n按 Ctrl+X → 输入 Y → 回车保存文件，然后执行： sudo update-grub 重启系统： sudo reboot 3.2 方法 2：禁止微代码集成到 initramfs（linuxmint 可行、Manjaro 不可行） # 若降级无效，需彻底阻止微代码被加载到初始内存盘：\n编辑微代码配置文件： sudo nano /etc/default/intel-microcode 修改为以下内容： IUCODE_TOOL_INITRAMFS=no 重新生成 initramfs： sudo update-initramfs -u # Ubuntu/Debian sudo dracut -f # Fedora/openSUSE 3.3 方法 3：降级 Intel 微代码（没试过） # 进入 Recovery Mode 选择 resume 进入系统。 执行以下命令安装旧版微代码包： sudo apt install intel-microcode=3.20180312.0~ubuntu18.04.1 # Ubuntu 18.04 示例版本 3.4 试过没用的方法（别看这个，Manjaro 没用） # 在 Arch Linux 中阻止 Intel 微代码打包到 initramfs，通过配置 mkinitcpio 工具实现。\n移除 ​ microcode ​​ 钩子\n编辑 /etc/mkinitcpio.conf： sudo nano /etc/mkinitcpio.conf 在 HOOKS 行中找到 microcode 并将其删除。例如修改前： HOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block filesystems fsck) 修改后：\nHOOKS=(base systemd autodetect modconf kms keyboard sd-vconsole block filesystems fsck) 保存文件（Ctrl+O → Enter → Ctrl+X）。 重新生成 initramfs\n执行以下命令应用更改：\nsudo mkinitcpio -P 此命令会为所有已安装的内核重新生成 initramfs 镜像（如 initramfs-linux.img），不再包含微代码。\n验证是否生效\n检查生成的 initramfs 内容： lsinitcpio /boot/initramfs-linux.img | grep -i microcode 若输出中无 intel-ucode.img 等微代码文件，则表示已成功移除。\n4. ⚠️不要直接删除​​ intel_ucode ​​包 # 4.1 如果已经删了 # 开机会提示缺失​​ ucode.img ​​蓝屏（Manjaro）\n4.1.1 原因 # 卸载 intel-ucode 后，/boot/intel-ucode.img 文件被删除。 但 GRUB 配置未更新，仍包含对该文件的引用，导致引导时因文件缺失而崩溃。 4.1.2 解决方案：更新 GRUB 配置（没试过，来自 DeepSeek） # 需手动移除对 intel-ucode.img 的依赖，并重新生成引导文件：\n使用 Arch Linux 安装介质启动\n从 USB 安装盘启动，选择 “Troubleshooting” → “Boot Arch Linux” 进入临时系统。 挂载原系统分区\n假设根分区为 /dev/nvme0n1p2，EFI 分区为 /dev/nvme0n1p1： mount /dev/nvme0n1p2 /mnt # 挂载根分区 mount /dev/nvme0n1p1 /mnt/boot # 挂载 EFI 分区 arch-chroot /mnt # 切换到原系统环境 修改 GRUB 配置文件\n编辑 /boot/grub/grub.cfg 或重新生成配置： 方法 1：重新生成 GRUB 配置（推荐） grub-mkconfig -o /boot/grub/grub.cfg # 自动清理无效的 ucode 引用 方法 2：手动编辑（若自动生成无效）\n找到所有包含 initrd /boot/intel-ucode.img 的行，删除该部分，仅保留对 initramfs 的引用。例如：\n原内容： initrd /boot/intel-ucode.img /boot/initramfs-linux.img 修改为：\ninitrd /boot/initramfs-linux.img 退出并重启 exit umount -R /mnt reboot 4.2 可能的正确删除方法 # 若你坚持卸载微码（一般不推荐，除非确定 CPU 无需更新），需确保彻底清理：\n卸载包并清除残留 sudo pacman -Rns intel-ucode # 卸载并删除依赖配置 sudo rm /boot/intel-ucode.img # 确保文件被删除 重建 initramfs（部分内核需此步骤） sudo mkinitcpio -P # 重新生成 initramfs，避免依赖微码 ","date":"2025-8-3","externalUrl":null,"permalink":"/posts/linux%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"Posts","summary":"","title":"linux开机黑屏的一种解决方案","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]